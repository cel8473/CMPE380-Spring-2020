############################################################
# This make file demonstrated all special variables
# student copy
############################################################

# Standard compile flags
CC       = gcc
CFLAGS   = -O1 -g -Wall -std=c99 -pedantic
CSRC     = a.c b.c c.c
OSRC     = $(CSRC: .c= .o) 
VALGRIND = valgrind --tool=memcheck --leak-check=yes --track-origins=yes

# This demonstrates the returned target name
# $@ to represent the full target name of the current target
target1 target2:
	@echo "Target name is '$@'"

#$? returns the dependencies that are newer than the current ntarget
bin1: $(CSRC)
	@echo "Dependency change for bin1 is '$?'"
	$(CC) a.c b.c c.c -o $@
   

#$^ returns the names of all the dependencies with space as the delimiter
#$< returns the name of the first dependency
bin2: $(OSRC)
	@echo "Linking '$^' to '$@'"
	@echo "The first dependency of '$^' is '$<'"
	$(CC) $^ -o $@

# This checks the associated .c files for the passed .o files
# assumes CC and CFLAGS variable for the passed list of objects
#.o.c:  
#	@echo "Compiling '$*'"

# This checks the associated .c files and o files, similar to
# the .o.c: rule but gives more control
%.o: %.c
	@echo "Dependency change is '$*'"
	$(CC) $*.c -c

# This rule really does a multi-comparison of all of the object 
# against all the the source file.  It doesn't compile the minimum
# set
#a.o b.o c.o: a.c b.c c.c
#	@echo "Compiling '$*'"
#	$(CC) $*.c -ca

#Generates a Valgrind memory report
mem: bin2
	$(VALGRIND) ./bin2 >> mem.txt 2>&1
 
clean:
	-rm -f *.o bin1 bin2
